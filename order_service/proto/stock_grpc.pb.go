// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: stock.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StockClient is the client API for Stock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockClient interface {
	SetStock(ctx context.Context, in *GoodsStockInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetStock(ctx context.Context, in *GoodsStockInfo, opts ...grpc.CallOption) (*GoodsStockInfo, error)
	ReduceStock(ctx context.Context, in *GoodsStockInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BatchGetStock(ctx context.Context, in *StockInfoList, opts ...grpc.CallOption) (*StockInfoList, error)
	BatchReduceStock(ctx context.Context, in *StockInfoList, opts ...grpc.CallOption) (*StockInfoList, error)
	RollbackStock(ctx context.Context, in *GoodsStockInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type stockClient struct {
	cc grpc.ClientConnInterface
}

func NewStockClient(cc grpc.ClientConnInterface) StockClient {
	return &stockClient{cc}
}

func (c *stockClient) SetStock(ctx context.Context, in *GoodsStockInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.stock/SetStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) GetStock(ctx context.Context, in *GoodsStockInfo, opts ...grpc.CallOption) (*GoodsStockInfo, error) {
	out := new(GoodsStockInfo)
	err := c.cc.Invoke(ctx, "/proto.stock/GetStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) ReduceStock(ctx context.Context, in *GoodsStockInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.stock/ReduceStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) BatchGetStock(ctx context.Context, in *StockInfoList, opts ...grpc.CallOption) (*StockInfoList, error) {
	out := new(StockInfoList)
	err := c.cc.Invoke(ctx, "/proto.stock/BatchGetStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) BatchReduceStock(ctx context.Context, in *StockInfoList, opts ...grpc.CallOption) (*StockInfoList, error) {
	out := new(StockInfoList)
	err := c.cc.Invoke(ctx, "/proto.stock/BatchReduceStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) RollbackStock(ctx context.Context, in *GoodsStockInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.stock/RollbackStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServer is the server API for Stock service.
// All implementations must embed UnimplementedStockServer
// for forward compatibility
type StockServer interface {
	SetStock(context.Context, *GoodsStockInfo) (*emptypb.Empty, error)
	GetStock(context.Context, *GoodsStockInfo) (*GoodsStockInfo, error)
	ReduceStock(context.Context, *GoodsStockInfo) (*emptypb.Empty, error)
	BatchGetStock(context.Context, *StockInfoList) (*StockInfoList, error)
	BatchReduceStock(context.Context, *StockInfoList) (*StockInfoList, error)
	RollbackStock(context.Context, *GoodsStockInfo) (*emptypb.Empty, error)
	mustEmbedUnimplementedStockServer()
}

// UnimplementedStockServer must be embedded to have forward compatible implementations.
type UnimplementedStockServer struct {
}

func (UnimplementedStockServer) SetStock(context.Context, *GoodsStockInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStock not implemented")
}
func (UnimplementedStockServer) GetStock(context.Context, *GoodsStockInfo) (*GoodsStockInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStock not implemented")
}
func (UnimplementedStockServer) ReduceStock(context.Context, *GoodsStockInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceStock not implemented")
}
func (UnimplementedStockServer) BatchGetStock(context.Context, *StockInfoList) (*StockInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetStock not implemented")
}
func (UnimplementedStockServer) BatchReduceStock(context.Context, *StockInfoList) (*StockInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchReduceStock not implemented")
}
func (UnimplementedStockServer) RollbackStock(context.Context, *GoodsStockInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackStock not implemented")
}
func (UnimplementedStockServer) mustEmbedUnimplementedStockServer() {}

// UnsafeStockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServer will
// result in compilation errors.
type UnsafeStockServer interface {
	mustEmbedUnimplementedStockServer()
}

func RegisterStockServer(s grpc.ServiceRegistrar, srv StockServer) {
	s.RegisterService(&Stock_ServiceDesc, srv)
}

func _Stock_SetStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsStockInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).SetStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stock/SetStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).SetStock(ctx, req.(*GoodsStockInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_GetStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsStockInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).GetStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stock/GetStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).GetStock(ctx, req.(*GoodsStockInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_ReduceStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsStockInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).ReduceStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stock/ReduceStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).ReduceStock(ctx, req.(*GoodsStockInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_BatchGetStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockInfoList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).BatchGetStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stock/BatchGetStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).BatchGetStock(ctx, req.(*StockInfoList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_BatchReduceStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockInfoList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).BatchReduceStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stock/BatchReduceStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).BatchReduceStock(ctx, req.(*StockInfoList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_RollbackStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsStockInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).RollbackStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stock/RollbackStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).RollbackStock(ctx, req.(*GoodsStockInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Stock_ServiceDesc is the grpc.ServiceDesc for Stock service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stock_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.stock",
	HandlerType: (*StockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetStock",
			Handler:    _Stock_SetStock_Handler,
		},
		{
			MethodName: "GetStock",
			Handler:    _Stock_GetStock_Handler,
		},
		{
			MethodName: "ReduceStock",
			Handler:    _Stock_ReduceStock_Handler,
		},
		{
			MethodName: "BatchGetStock",
			Handler:    _Stock_BatchGetStock_Handler,
		},
		{
			MethodName: "BatchReduceStock",
			Handler:    _Stock_BatchReduceStock_Handler,
		},
		{
			MethodName: "RollbackStock",
			Handler:    _Stock_RollbackStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stock.proto",
}
